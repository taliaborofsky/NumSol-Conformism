eqDataD0_muNeg <- eqDataD0 %>% filter(mu_pos==FALSE)
print("Correlation between Cs and beta when D = 0")
cortest <- cor.test(eqDataD0$C_s, eqDataD0$beta, method="spearman")
cortest
spearman.ci(eqDataD0_muNeg$beta, eqDataD0_muNeg$C_s, nrep = 1000, conf.level = 0.95)
set.seed(5)
eqDataD0_muPos <- eqDataD0 %>% filter(mu_pos==TRUE)
eqDataD0_muNeg <- eqDataD0 %>% filter(mu_pos==FALSE)
print("Correlation between Cs and beta when D = 0")
cortest <- cor.test(eqDataD0$C_s, eqDataD0$beta, method="spearman")
cortest
spearman.ci(eqDataD0$C_s, eqDataD0$beta, nrep = 1000, conf.level=0.98)
set.seed(5)
print("Correlation between Cs and beta when D = 0 and mu >= 0")
cortest1 <- cor.test( eqDataD0_muPos$C_s, eqDataD0_muPos$beta, method = "spearman")
cortest1
spearman.ci(eqDataD0_muPos$beta, eqDataD0_muPos$C_s, nrep = 1000, conf.level = 0.95)
set.seed(5)
print("Correlation between Cs and beta when D = 0 and mu < 0")
cortest2 <- cor.test( eqDataD0_muNeg$C_s, eqDataD0_muNeg$beta, method = "spearman")
cortest2
# It'll help to know dk, dpc, lambda_x, lambda_y values, and keep track of where linear external stability analysis is inconclusive
x_local_inconclusive = abs(eqData$C_x)<0.001 & (eqData$a_stability == "both" | eqData$a_stability == "zero")
# It'll help to know dk, dpc, lambda_x, lambda_y values, and keep track of where linear external stability analysis is inconclusive
x_local_inconclusive = abs(eqData$C_s)<0.001 & (eqData$a_stability == "both" | eqData$a_stability == "zero")
x_local_inconclusive
knitr::opts_chunk$set(echo = TRUE)
# load the Unique Equilibria
uniqueEquilibria <- read.csv('UniqueEquilibriaDF_fixed.csv', as.is=TRUE)
# helped to round D values
uniqueEquilibria$D <-round(uniqueEquilibria$D,digits = 10)
# Adjusting bool strings to actual R bool values
uniqueEquilibria[uniqueEquilibria=="True"]=TRUE
uniqueEquilibria[uniqueEquilibria=="False"]=FALSE
### deal with equilibria for which lambda* = 1
# rename and do rest of changes to eqData
eqData <- uniqueEquilibria
# label by type of invasion that can happen. In combines the x_pos_invades with x_neg_invades, and the y_pos_invades with y_neg_invades
eqData$a_stability <- "zero"
eqData$a_stability[eqData$x_pos_invades==TRUE & eqData$x_neg_invades==FALSE] <- "positive"
eqData$a_stability[eqData$x_neg_invades==TRUE & eqData$x_pos_invades==FALSE] <- "negative"
eqData$a_stability[eqData$x_pos_invades==TRUE & eqData$x_neg_invades==TRUE] <- "both"
eqData$a_stability <- factor(eqData$a_stability)
eqData$b_stability <- "zero"
eqData$b_stability[eqData$y_pos_invades==TRUE & eqData$y_neg_invades==FALSE] <- "positive"
eqData$b_stability[eqData$y_neg_invades==TRUE & eqData$y_pos_invades==FALSE] <- "negative"
eqData$b_stability[eqData$y_pos_invades==TRUE & eqData$y_neg_invades==TRUE] <- "both"
eqData$b_stability <- factor(eqData$b_stability)
# It'll help to know dk, dpc, lambda_x, lambda_y values, and keep track of where linear external stability analysis is inconclusive
x_local_inconclusive = abs(eqData$C_s)<0.001 & (eqData$a_stability == "both" | eqData$a_stability == "zero")
eqData$x_local_inconclusive = x_local_inconclusive
eqData$y_local_inconclusive = abs(eqData$C_D)<0.001 & (eqData$b_stability == "both" | eqData$b_stability == "zero")
phi_fun <- function(p) p*(1-p)*(2*p-1)
find_K <- function(mu,s) pnorm(s,mean=mu,sd=1) - pnorm(-s,mean=mu,sd=1)
find_pc <- function(mu,s) 1 - pnorm(s, mean = mu, sd = 1)
find_dk <- function(mu,s,ds) find_K(mu,s+ds) - find_K(mu,s)
find_dpc <- function(mu,s,ds) find_pc(mu,s+ds) - find_pc(mu,s)
find_lambdax <- function(dpc, dk, D, u1eq, u2eq, r1eq, r2eq, Weq){
lambdax = 1 + (1/Weq)*(dpc + r1eq*(dk*u1eq + dk*D*phi_fun(u1eq) + dpc)
+ r2eq*(dk*u2eq + dk*D*phi_fun(u2eq) + dpc))
return(lambdax)
}
find_lambday <- function(dD, C_D){
lambday = 1 + dD*C_D
return(lambday)
}
eqData = eqData %>% mutate(dk_pos = find_dk(mu,s,0.01),
dpc_pos = find_dpc(mu,s,0.01),
dk_neg = find_dk(mu,s,-0.01),
dpc_neg = find_dpc(mu,s,-0.01)
) %>% mutate(
lambda_x_pos = find_lambdax(dpc_pos,dk_pos,D, u1eq,u2eq,r1eq,r2eq,Weq),
lambda_x_neg = find_lambdax(dpc_neg, dk_neg, D, u1eq, u2eq, r1eq, r2eq, Weq),
lambda_y_pos = find_lambday(0.01,C_D),
lambda_y_pos = find_lambday(-0.01,C_D)
)
# remove values where s = 0 and D != 0 because we assume an organism can't have the conformist transmission bias trait
# without being able to leran socially
eqData <- eqData %>% filter(!(s==0&D!=0))
# below was in the code for the first draft but we have since determined that it's unnecessary and
# can actually erroneously set cases where beta = 0, D = 0, pc = 0, and K>1/2 as stable
# # fix equilibria in which lambdastar = 1 but actually internally stable
# attach(eqData)
# mask =(beta==0)&(D==0)&(pc==0)&(K>0) # this equilibria might have lambda* = 1, but is actually internally stable
# eqData[mask,]$URstable = 1
# detach(eqData)
# only use equilibria that are internally stable
# no longer necessary because I'm only using equilibria that were arrived at through iteration: eqData <- eqData %>% filter(URstable == 1)
# # (NO LONGER NECESSARY)If C_s is negative when K = 0, then set it to 0
#eqData[(eqData$K==0)&(eqData$C_s<0),]$C_s = 0
# label by the sign of C_s
eqData$signC_s <- factor(sign(eqData$C_s))
# (Fixed. NO LONGER NECESSARY) thre are about 16 places where r says C_s = 0 but it's actually negative
# eqData$signC_s[eqData$signC_s==0] = -1
# label by the sign of C_D
eqData$signC_D <- factor(sign(eqData$C_D))
# add column for learning success
eqData$learningSuccess = eqData$u1eq + eqData$u2eq # portion of foragers that learn how to find food
# Make separate data frames for whether D \geq 0 or D \leq 0 and for whether or not u1 = u2
eqDataPos = eqData %>% filter(D>=0)
eqDataPos_UnEqual <-  eqDataPos %>% filter(difference > 0)
eqDataPos_Equal = eqDataPos %>% filter(difference==0)
# D < 0
eqDataNeg = eqData %>% filter(D<0)
eqDataNeg_UnEqual = eqDataNeg %>% filter(difference>0)
eqDataNeg_Equal = eqDataNeg %>% filter(difference==0)
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(car)
library(dplyr)
library(aod)
library(ggplot2)
library(latex2exp)
library(olsrr)
library(lmtest)
library(zeallot)
library(ROSE) # for roc curve
library(RVAideMemoire) # library that has spearman.ci function...gets confidence intervals on spearman using bootstrap
figure_folder = "/Users/taliaborofsky/Documents/Stanford/Research/Feldman/Ecology of Learning/Conformism/Paper_to_Submit_EcoMono2/"
grid <- expand.grid(K = seq(1/2,0.99,length.out=1000),u = seq(0,1,length.out=1000))
f <- function(K,u) (2*K-1)/K -3*u^2 -3*((2*K-1)/K -u)^2 + 2*u^3 + 2*((2*K-1)/K -u)^3
f2 <- function(K,u) (2*K-1)/K - u
grid$filled <- (f(grid$K,grid$u)>=0)
grid$filled[(f2(grid$K,grid$u)<0)|(f2(grid$K,grid$u)>1)] = NA
p<- ggplot(grid) + geom_tile(aes(x=K,y=u,fill=filled))  + theme_classic() + labs(x=TeX("$K$"),y = TeX("$\\hat{u_1}$"))+ theme(legend.position = "none") + scale_fill_brewer(palette="Set1", na.value="white") + theme(text = element_text(size = 20))
p
fn = "D0Unequal_C_D.png"
ggsave(file.path(figure_folder, fn), plot = p)
#red means C_D < 0, turquoise means C_D > 0
knitr::opts_chunk$set(echo = TRUE)
# load the Unique Equilibria
uniqueEquilibria <- read.csv('UniqueEquilibriaDF_fixed.csv', as.is=TRUE)
# helped to round D values
uniqueEquilibria$D <-round(uniqueEquilibria$D,digits = 10)
# Adjusting bool strings to actual R bool values
uniqueEquilibria[uniqueEquilibria=="True"]=TRUE
uniqueEquilibria[uniqueEquilibria=="False"]=FALSE
### deal with equilibria for which lambda* = 1
# rename and do rest of changes to eqData
eqData <- uniqueEquilibria
# label by type of invasion that can happen. In combines the x_pos_invades with x_neg_invades, and the y_pos_invades with y_neg_invades
eqData$a_stability <- "zero"
eqData$a_stability[eqData$x_pos_invades==TRUE & eqData$x_neg_invades==FALSE] <- "positive"
eqData$a_stability[eqData$x_neg_invades==TRUE & eqData$x_pos_invades==FALSE] <- "negative"
eqData$a_stability[eqData$x_pos_invades==TRUE & eqData$x_neg_invades==TRUE] <- "both"
eqData$a_stability <- factor(eqData$a_stability)
eqData$b_stability <- "zero"
eqData$b_stability[eqData$y_pos_invades==TRUE & eqData$y_neg_invades==FALSE] <- "positive"
eqData$b_stability[eqData$y_neg_invades==TRUE & eqData$y_pos_invades==FALSE] <- "negative"
eqData$b_stability[eqData$y_pos_invades==TRUE & eqData$y_neg_invades==TRUE] <- "both"
eqData$b_stability <- factor(eqData$b_stability)
# It'll help to know dk, dpc, lambda_x, lambda_y values, and keep track of where linear external stability analysis is inconclusive
x_local_inconclusive = abs(eqData$C_s)<0.001 & (eqData$a_stability == "both" | eqData$a_stability == "zero")
eqData$x_local_inconclusive = x_local_inconclusive
eqData$y_local_inconclusive = abs(eqData$C_D)<0.001 & (eqData$b_stability == "both" | eqData$b_stability == "zero")
phi_fun <- function(p) p*(1-p)*(2*p-1)
find_K <- function(mu,s) pnorm(s,mean=mu,sd=1) - pnorm(-s,mean=mu,sd=1)
find_pc <- function(mu,s) 1 - pnorm(s, mean = mu, sd = 1)
find_dk <- function(mu,s,ds) find_K(mu,s+ds) - find_K(mu,s)
find_dpc <- function(mu,s,ds) find_pc(mu,s+ds) - find_pc(mu,s)
find_lambdax <- function(dpc, dk, D, u1eq, u2eq, r1eq, r2eq, Weq){
lambdax = 1 + (1/Weq)*(dpc + r1eq*(dk*u1eq + dk*D*phi_fun(u1eq) + dpc)
+ r2eq*(dk*u2eq + dk*D*phi_fun(u2eq) + dpc))
return(lambdax)
}
find_lambday <- function(dD, C_D){
lambday = 1 + dD*C_D
return(lambday)
}
eqData = eqData %>% mutate(dk_pos = find_dk(mu,s,0.01),
dpc_pos = find_dpc(mu,s,0.01),
dk_neg = find_dk(mu,s,-0.01),
dpc_neg = find_dpc(mu,s,-0.01)
) %>% mutate(
lambda_x_pos = find_lambdax(dpc_pos,dk_pos,D, u1eq,u2eq,r1eq,r2eq,Weq),
lambda_x_neg = find_lambdax(dpc_neg, dk_neg, D, u1eq, u2eq, r1eq, r2eq, Weq),
lambda_y_pos = find_lambday(0.01,C_D),
lambda_y_pos = find_lambday(-0.01,C_D)
)
# remove values where s = 0 and D != 0 because we assume an organism can't have the conformist transmission bias trait
# without being able to leran socially
eqData <- eqData %>% filter(!(s==0&D!=0))
# below was in the code for the first draft but we have since determined that it's unnecessary and
# can actually erroneously set cases where beta = 0, D = 0, pc = 0, and K>1/2 as stable
# # fix equilibria in which lambdastar = 1 but actually internally stable
# attach(eqData)
# mask =(beta==0)&(D==0)&(pc==0)&(K>0) # this equilibria might have lambda* = 1, but is actually internally stable
# eqData[mask,]$URstable = 1
# detach(eqData)
# only use equilibria that are internally stable
# no longer necessary because I'm only using equilibria that were arrived at through iteration: eqData <- eqData %>% filter(URstable == 1)
# # (NO LONGER NECESSARY)If C_s is negative when K = 0, then set it to 0
#eqData[(eqData$K==0)&(eqData$C_s<0),]$C_s = 0
# label by the sign of C_s
eqData$signC_s <- factor(sign(eqData$C_s))
# (Fixed. NO LONGER NECESSARY) thre are about 16 places where r says C_s = 0 but it's actually negative
# eqData$signC_s[eqData$signC_s==0] = -1
# label by the sign of C_D
eqData$signC_D <- factor(sign(eqData$C_D))
# add column for learning success
eqData$learningSuccess = eqData$u1eq + eqData$u2eq # portion of foragers that learn how to find food
# Make separate data frames for whether D \geq 0 or D \leq 0 and for whether or not u1 = u2
eqDataPos = eqData %>% filter(D>=0)
eqDataPos_UnEqual <-  eqDataPos %>% filter(difference > 0)
eqDataPos_Equal = eqDataPos %>% filter(difference==0)
# D < 0
eqDataNeg = eqData %>% filter(D<0)
eqDataNeg_UnEqual = eqDataNeg %>% filter(difference>0)
eqDataNeg_Equal = eqDataNeg %>% filter(difference==0)
print('Anti-conformity and W')
# want for D <= 0, so create eqData_nonNeg
eqData_nonNeg = eqData %>% filter(D <= 0)
corWeq <- cor.test(eqData_nonNeg$D, eqData_nonNeg$Weq, method = "spearman"); print(corWeq)
print('Anti-conformity and learning success')
corlearn <- cor.test(eqData_nonNeg$D, eqData_nonNeg$learningSuccess, method = "spearman"); print(corlearn)
set.seed(5)
spearman.ci(eqDataNeg$D, eqDataNeg$learningSuccess, nrep = 1000, conf.level = 0.985) # use conf.level = 0.995 because 0.999
#mpos <- lm(data=eqDataPos, Weq ~ D)
#summary(mpos)
cor.test(eqDataPos$Weq, eqDataPos$D, method = "spearman")
set.seed(5)
spearman.ci(eqDataPos$D, eqDataPos$Weq, nrep = 1000, conf.level = 0.999)
cor.test(eqDataPos$learningSuccess, eqDataPos$D, method = "spearman")
set.seed(5)
spearman.ci(eqDataPos$D, eqDataPos$learningSuccess, nrep = 1000, conf.level = 0.999)
m1 <- lm(learningSuccess ~ K, data = eqData)
summary(m1)
ctest <- cor.test(eqData$K, eqData$learningSuccess, method = "spearman")
ctest
set.seed(5)
spearman.ci(eqData$K, eqData$learningSuccess, nrep = 1000, conf.level = 0.999)
#attach(eqData)
eqData_use = eqData %>% filter(!x_local_inconclusive)
#maxs$Tukey = c('a','b','c')
p.b <- ggplot(data=eqData_use, aes(x=signC_s,y=learningSuccess,fill=signC_s))+geom_violin(adjust=1) + theme_classic() + labs(x=TeX("\nSign of $C_s$"), fill = TeX("$sign of $C_s$"), y = TeX("\\hat{u_1} + \\hat{u_2}"),fontsize=20) + theme(legend.position = "none") + theme(text = element_text(size = 20))
p.b
fn = "LearnSuccess_SignCs.png"
#ggsave("LearnSuccess_SignCs.png", plot = p.b)
ggsave(file.path(figure_folder, fn), plot = p.b)
p.his <- ggplot(data=eqData_use, aes(x=learningSuccess))+geom_histogram(binwidth=.01) + theme_classic() + theme(text = element_text(size = 20)) + labs(x = "Learning Success")
p.his
fn = "LearnSuccess_his.png"
ggsave(file.path(figure_folder,fn), plot = p.his)
abs_max = max(learningSuccess)
attach(eqDataPos)
isDiff = difference>0
dat = eqDataPos %>% filter(difference>0 & !y_local_inconclusive)
p.b <- ggplot(data=dat, aes(x=factor(y_pos_invades),y=beta))+geom_boxplot() + theme_classic() + labs(x="Increased Conformity Evolves", y = TeX("$\\beta$"),fontsize=20) + theme(text = element_text(size = 20),axis.title.x = element_text(vjust=-1.1)) #+ geom_text(data=maxs,aes(label=Tukey))
p.b
fn = "BehavPref_boxplot_D.png"
ggsave(file.path(figure_folder,fn), plot = p.b)
p.b <- ggplot(data=dat, aes(x=factor(y_neg_invades),y=beta))+geom_boxplot() + theme_classic() + labs(x="Decreased Conformity Evolves", y = TeX("$\\beta$"),title = TeX("$\\hat{u_1} \\neq \\hat{u_2}$"),fontsize=20) + theme(text = element_text(size = 20),axis.title.x = element_text(vjust=-1.1)) #+ geom_text(data=maxs,aes(label=Tukey))
p.b
fn = "BehavPref_boxplot_pos_diff_Dless.png"
ggsave(file.path(figure_folder,fn), plot = p.b)
p.b <- ggplot(data=eqData %>% filter(difference==0), aes(x=factor(y_neg_invades),y=beta))+geom_boxplot() + theme_classic() + labs(x="Decreased Conformity Evolves", y = TeX("$\\beta$"), title = TeX("$\\hat{u_1} = \\hat{u_2}$"),fontsize=20) + theme(text = element_text(size = 20),axis.title.x = element_text(vjust=-1.1)) #+ geom_text(data=maxs,aes(label=Tukey))
p.b
fn = "BehavPref_boxplot_pos_nodiff_Dless.png"
ggsave(file.path(figure_folder,fn), plot = p.b)
# aov <- aov(beta ~ factor(signC_D)*factor(isDiff))
# summary(aov)
# aov1 <- aov(beta~signC_D)
# TukeyHSD(aov1)
# aov2 <- aov(beta~signC_D, subset=isDiff) #when hu1 \neq hu2
# aov3 <- aov(beta~signC_D, subset=!isDiff) #when hu1 = hu2
# t <- TukeyHSD(aov)
# t$`factor(signC_D):factor(isDiff)`
# plot(t$`factor(signC_D):factor(isDiff)`)
#detach("package:plotly", unload = TRUE)
library(ggplot2)
library(ggtern)
library(latex2exp)
library("viridis")
# C_s --> actually uses a_stability
datUse_C_s <- eqDataPos %>% filter(!x_local_inconclusive)
plotC_s <- ggplot(data = datUse_C_s, mapping = aes(x = u1eq, y = u2eq, z = bueq)) + coord_tern(Tlim=c(0,1),Llim=c(0,1),Rlim=c(0,1)) + geom_point(aes(colour = signC_s), size = 5, alpha = 0.8, shape = 1) + theme_bw()
plotC_s <- plotC_s + tern_limits(labels=c(0,0.2, 0.4, 0.6, 0.8, 1)) + labs(x = TeX("$u_1$"), y = TeX("$u_2$"), z = TeX("$\\bar{u}$"),color = TeX("$sign(C_s )$")) +theme_legend_position(x = "topleft")  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))  + theme(text = element_text(size = 18))
plotC_s
ggsave(file.path(figure_folder,"ternaryAll_C_s.png"), plot = plotC_s)
#C_D
datUse_C_D <- eqDataPos %>% filter(!y_local_inconclusive)
plotC_D <- ggplot(data = datUse_C_D, mapping = aes(x = u1eq, y = u2eq, z = bueq)) + coord_tern(Tlim=c(0,1),Llim=c(0,1),Rlim=c(0,1)) + geom_point(aes(colour = signC_D), size = 5, alpha = 0.8, shape = 1) + theme_bw()
plotC_D <- plotC_D + tern_limits(labels=c(0,0.2, 0.4, 0.6, 0.8, 1)) + labs(x = TeX("$u_1$"), y = TeX("$u_2$"), z = TeX("$\\bar{u}$"), color = TeX("$sign(C_D)")) +theme_legend_position(x = "topleft")  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))+ theme(text = element_text(size = 18))
plotC_D
ggsave(file.path(figure_folder,"ternaryAll_C_D.png"), plot = plotC_D)
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(car)
library(dplyr)
library(aod)
library(ggplot2)
library(latex2exp)
library(olsrr)
library(lmtest)
library(zeallot)
library(ROSE) # for roc curve
library(RVAideMemoire) # library that has spearman.ci function...gets confidence intervals on spearman using bootstrap
figure_folder = "/Users/taliaborofsky/Documents/Stanford/Research/Feldman/Ecology of Learning/Conformism/Paper_to_Submit_EcoMono2/"
#detach("package:plotly", unload = TRUE)
library(ggplot2)
library(ggtern)
library(latex2exp)
library("viridis")
library("ggsci")
datUse = eqDataPos
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(car)
library(dplyr)
library(aod)
library(ggplot2)
library(latex2exp)
library(olsrr)
library(lmtest)
library(zeallot)
library(ROSE) # for roc curve
library(RVAideMemoire) # library that has spearman.ci function...gets confidence intervals on spearman using bootstrap
figure_folder = "/Users/taliaborofsky/Documents/Stanford/Research/Feldman/Ecology of Learning/Conformism/Paper_to_Submit_EcoMono2/"
grid <- expand.grid(K = seq(1/2,0.99,length.out=1000),u = seq(0,1,length.out=1000))
f <- function(K,u) (2*K-1)/K -3*u^2 -3*((2*K-1)/K -u)^2 + 2*u^3 + 2*((2*K-1)/K -u)^3
f2 <- function(K,u) (2*K-1)/K - u
grid$filled <- (f(grid$K,grid$u)>=0)
grid$filled[(f2(grid$K,grid$u)<0)|(f2(grid$K,grid$u)>1)] = NA
p<- ggplot(grid) + geom_tile(aes(x=K,y=u,fill=filled))  + theme_classic() + labs(x=TeX("$K$"),y = TeX("$\\hat{u_1}$"))+ theme(legend.position = "none") + scale_fill_brewer(palette="Set1", na.value="white") + theme(text = element_text(size = 20))
p
fn = "D0Unequal_C_D.png"
ggsave(file.path(figure_folder, fn), plot = p)
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(car)
library(dplyr)
library(aod)
library(ggplot2)
library(latex2exp)
library(olsrr)
library(lmtest)
library(zeallot)
library(ROSE) # for roc curve
library(RVAideMemoire) # library that has spearman.ci function...gets confidence intervals on spearman using bootstrap
figure_folder = "/Users/taliaborofsky/Documents/Stanford/Research/Feldman/Ecology of Learning/Conformism/Paper_to_Submit_EcoMono2/"
knitr::opts_chunk$set(echo = TRUE)
# load the Unique Equilibria
uniqueEquilibria <- read.csv('UniqueEquilibriaDF_fixed.csv', as.is=TRUE)
# helped to round D values
uniqueEquilibria$D <-round(uniqueEquilibria$D,digits = 10)
# Adjusting bool strings to actual R bool values
uniqueEquilibria[uniqueEquilibria=="True"]=TRUE
uniqueEquilibria[uniqueEquilibria=="False"]=FALSE
### deal with equilibria for which lambda* = 1
# rename and do rest of changes to eqData
eqData <- uniqueEquilibria
# label by type of invasion that can happen. In combines the x_pos_invades with x_neg_invades, and the y_pos_invades with y_neg_invades
eqData$a_stability <- "zero"
eqData$a_stability[eqData$x_pos_invades==TRUE & eqData$x_neg_invades==FALSE] <- "positive"
eqData$a_stability[eqData$x_neg_invades==TRUE & eqData$x_pos_invades==FALSE] <- "negative"
eqData$a_stability[eqData$x_pos_invades==TRUE & eqData$x_neg_invades==TRUE] <- "both"
eqData$a_stability <- factor(eqData$a_stability)
eqData$b_stability <- "zero"
eqData$b_stability[eqData$y_pos_invades==TRUE & eqData$y_neg_invades==FALSE] <- "positive"
eqData$b_stability[eqData$y_neg_invades==TRUE & eqData$y_pos_invades==FALSE] <- "negative"
eqData$b_stability[eqData$y_pos_invades==TRUE & eqData$y_neg_invades==TRUE] <- "both"
eqData$b_stability <- factor(eqData$b_stability)
# It'll help to know dk, dpc, lambda_x, lambda_y values, and keep track of where linear external stability analysis is inconclusive
x_local_inconclusive = abs(eqData$C_s)<0.001 & (eqData$a_stability == "both" | eqData$a_stability == "zero")
eqData$x_local_inconclusive = x_local_inconclusive
eqData$y_local_inconclusive = abs(eqData$C_D)<0.001 & (eqData$b_stability == "both" | eqData$b_stability == "zero")
phi_fun <- function(p) p*(1-p)*(2*p-1)
find_K <- function(mu,s) pnorm(s,mean=mu,sd=1) - pnorm(-s,mean=mu,sd=1)
find_pc <- function(mu,s) 1 - pnorm(s, mean = mu, sd = 1)
find_dk <- function(mu,s,ds) find_K(mu,s+ds) - find_K(mu,s)
find_dpc <- function(mu,s,ds) find_pc(mu,s+ds) - find_pc(mu,s)
find_lambdax <- function(dpc, dk, D, u1eq, u2eq, r1eq, r2eq, Weq){
lambdax = 1 + (1/Weq)*(dpc + r1eq*(dk*u1eq + dk*D*phi_fun(u1eq) + dpc)
+ r2eq*(dk*u2eq + dk*D*phi_fun(u2eq) + dpc))
return(lambdax)
}
find_lambday <- function(dD, C_D){
lambday = 1 + dD*C_D
return(lambday)
}
eqData = eqData %>% mutate(dk_pos = find_dk(mu,s,0.01),
dpc_pos = find_dpc(mu,s,0.01),
dk_neg = find_dk(mu,s,-0.01),
dpc_neg = find_dpc(mu,s,-0.01)
) %>% mutate(
lambda_x_pos = find_lambdax(dpc_pos,dk_pos,D, u1eq,u2eq,r1eq,r2eq,Weq),
lambda_x_neg = find_lambdax(dpc_neg, dk_neg, D, u1eq, u2eq, r1eq, r2eq, Weq),
lambda_y_pos = find_lambday(0.01,C_D),
lambda_y_pos = find_lambday(-0.01,C_D)
)
# remove values where s = 0 and D != 0 because we assume an organism can't have the conformist transmission bias trait
# without being able to leran socially
eqData <- eqData %>% filter(!(s==0&D!=0))
# below was in the code for the first draft but we have since determined that it's unnecessary and
# can actually erroneously set cases where beta = 0, D = 0, pc = 0, and K>1/2 as stable
# # fix equilibria in which lambdastar = 1 but actually internally stable
# attach(eqData)
# mask =(beta==0)&(D==0)&(pc==0)&(K>0) # this equilibria might have lambda* = 1, but is actually internally stable
# eqData[mask,]$URstable = 1
# detach(eqData)
# only use equilibria that are internally stable
# no longer necessary because I'm only using equilibria that were arrived at through iteration: eqData <- eqData %>% filter(URstable == 1)
# # (NO LONGER NECESSARY)If C_s is negative when K = 0, then set it to 0
#eqData[(eqData$K==0)&(eqData$C_s<0),]$C_s = 0
# label by the sign of C_s
eqData$signC_s <- factor(sign(eqData$C_s))
# (Fixed. NO LONGER NECESSARY) thre are about 16 places where r says C_s = 0 but it's actually negative
# eqData$signC_s[eqData$signC_s==0] = -1
# label by the sign of C_D
eqData$signC_D <- factor(sign(eqData$C_D))
# add column for learning success
eqData$learningSuccess = eqData$u1eq + eqData$u2eq # portion of foragers that learn how to find food
# Make separate data frames for whether D \geq 0 or D \leq 0 and for whether or not u1 = u2
eqDataPos = eqData %>% filter(D>=0)
eqDataPos_UnEqual <-  eqDataPos %>% filter(difference > 0)
eqDataPos_Equal = eqDataPos %>% filter(difference==0)
# D < 0
eqDataNeg = eqData %>% filter(D<0)
eqDataNeg_UnEqual = eqDataNeg %>% filter(difference>0)
eqDataNeg_Equal = eqDataNeg %>% filter(difference==0)
eqDataK0 <- eqData %>% filter(K==0)
ds = 0.5
dk_05 <- find_dk(mu,s,0.5)
dk_05 <- find_dk(eqDataK0$mu,eqDataK0$s,0.5)
ds = 0.5
dk_05 <- find_dk(eqDataK0$mu,eqDataK0$s,0.5)
dpc_05 <- find_dpc(eqDataK0$mu,eqDataK0$s,0.5)
lambda_x_0_5 <- find_lambdax(dpc_05, dk_05, eqDataK0$D,
eqDataK0$u1eq, eqDataK0$u2eq,
eqDataK0$r1eq, eqDataK0$r2eq,
eqDataK0$Weq)
sum(lambda_x_0_5 == TRUE)
sum(lambda_x_0_5 >1)
ds = 1
dk <- find_dk(eqDataK0$mu,eqDataK0$s,ds)
dpc<- find_dpc(eqDataK0$mu,eqDataK0$s,ds)
lambda_x <- find_lambdax(dpc, dk, eqDataK0$D,
eqDataK0$u1eq, eqDataK0$u2eq,
eqDataK0$r1eq, eqDataK0$r2eq,
eqDataK0$Weq)
sum(lambda_x >1)
ds = 2
dk <- find_dk(eqDataK0$mu,eqDataK0$s,ds)
dpc<- find_dpc(eqDataK0$mu,eqDataK0$s,ds)
lambda_x <- find_lambdax(dpc, dk, eqDataK0$D,
eqDataK0$u1eq, eqDataK0$u2eq,
eqDataK0$r1eq, eqDataK0$r2eq,
eqDataK0$Weq)
sum(lambda_x >1)
ds = 4
dk <- find_dk(eqDataK0$mu,eqDataK0$s,ds)
dpc<- find_dpc(eqDataK0$mu,eqDataK0$s,ds)
lambda_x <- find_lambdax(dpc, dk, eqDataK0$D,
eqDataK0$u1eq, eqDataK0$u2eq,
eqDataK0$r1eq, eqDataK0$r2eq,
eqDataK0$Weq)
sum(lambda_x >1)
eqDataK0 %>% filter(lambda_x > 1)
eqDataK0 <- uniqueEquilibria %>% filter(K==0)
ds = 4
dk <- find_dk(eqDataK0$mu,eqDataK0$s,ds)
dpc<- find_dpc(eqDataK0$mu,eqDataK0$s,ds)
lambda_x <- find_lambdax(dpc, dk, eqDataK0$D,
eqDataK0$u1eq, eqDataK0$u2eq,
eqDataK0$r1eq, eqDataK0$r2eq,
eqDataK0$Weq)
sum(lambda_x >1)
eqDataK0 %>% filter(lambda_x > 1)
ds = 3
dk <- find_dk(eqDataK0$mu,eqDataK0$s,ds)
dpc<- find_dpc(eqDataK0$mu,eqDataK0$s,ds)
lambda_x <- find_lambdax(dpc, dk, eqDataK0$D,
eqDataK0$u1eq, eqDataK0$u2eq,
eqDataK0$r1eq, eqDataK0$r2eq,
eqDataK0$Weq)
sum(lambda_x >1)
eqDataK0 %>% filter(lambda_x > 1)
ds = 2
dk <- find_dk(eqDataK0$mu,eqDataK0$s,ds)
dpc<- find_dpc(eqDataK0$mu,eqDataK0$s,ds)
lambda_x <- find_lambdax(dpc, dk, eqDataK0$D,
eqDataK0$u1eq, eqDataK0$u2eq,
eqDataK0$r1eq, eqDataK0$r2eq,
eqDataK0$Weq)
sum(lambda_x >1)
eqDataK0 %>% filter(lambda_x > 1)
ds = 0.5
dk <- find_dk(eqDataK0$mu,eqDataK0$s,ds)
dpc<- find_dpc(eqDataK0$mu,eqDataK0$s,ds)
lambda_x <- find_lambdax(dpc, dk, eqDataK0$D,
eqDataK0$u1eq, eqDataK0$u2eq,
eqDataK0$r1eq, eqDataK0$r2eq,
eqDataK0$Weq)
sum(lambda_x >1)
ds = 1
dk <- find_dk(eqDataK0$mu,eqDataK0$s,ds)
dpc<- find_dpc(eqDataK0$mu,eqDataK0$s,ds)
lambda_x <- find_lambdax(dpc, dk, eqDataK0$D,
eqDataK0$u1eq, eqDataK0$u2eq,
eqDataK0$r1eq, eqDataK0$r2eq,
eqDataK0$Weq)
sum(lambda_x >1)
eqDataK0 %>% filter(lambda_x > 1)
ds = 1.5
dk <- find_dk(eqDataK0$mu,eqDataK0$s,ds)
dpc<- find_dpc(eqDataK0$mu,eqDataK0$s,ds)
lambda_x <- find_lambdax(dpc, dk, eqDataK0$D,
eqDataK0$u1eq, eqDataK0$u2eq,
eqDataK0$r1eq, eqDataK0$r2eq,
eqDataK0$Weq)
sum(lambda_x >1)
eqDataK0 %>% filter(lambda_x > 1)
